{-
# Even Fibonacci numbers

<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>
<p class="center">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>
<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>


[Link to problem](https://projecteuler.net/problem=2)
-}

-- this is a comment

{-
this is a multiline comment

1,2,3,5,8,...

l = [1,2]

while l[-1] < 4000000:
    l.append(l[-1] + l[-2])

sum l

---

how would I do this in an immutable style?

const limit = 4000000
const fib = (a, b) => a < limit ? fib(b, a + b) : a

function fib(acc = [1, 2]) {
    if (acc[1] > limit) {
        return acc
    } else {
        return fib([...acc, acc[-1] + acc[-2]])
    }
}

const seq = fib()
const sum = seq.reduce((acc, x) => acc + x, 0)

-}

limit = 4000000
fib l = if (last l) < limit then fib (l ++ [last l + last (init l)]) else l
fibseq = fib [1,2]
evens = filter even fibseq

solve = sum evens

validate = solve == 4613732

-- this one's slow, we think because it's calculating the whole 
-- sequence on each run of fib:

-- limit = 4000000

-- fib 0 = 1
-- fib 1 = 1
-- fib n = fib (n - 1) + fib (n - 2)

-- fibseq = takeWhile (<limit) $ map fib [1..]
-- evens = filter even fibseq

-- solve = sum evens

-- validate = solve == 4613732
